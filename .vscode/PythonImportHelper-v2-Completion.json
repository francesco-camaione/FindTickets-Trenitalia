[
    {
        "label": "utils",
        "importPath": "main.utils",
        "description": "main.utils",
        "isExtraImport": true,
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "main.utils",
        "description": "main.utils",
        "isExtraImport": true,
        "detail": "main.utils",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Train",
        "importPath": "main.model.train",
        "description": "main.model.train",
        "isExtraImport": true,
        "detail": "main.model.train",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "Jinja2Templates",
        "importPath": "fastapi.templating",
        "description": "fastapi.templating",
        "isExtraImport": true,
        "detail": "fastapi.templating",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "starlette.staticfiles",
        "description": "starlette.staticfiles",
        "isExtraImport": true,
        "detail": "starlette.staticfiles",
        "documentation": {}
    },
    {
        "label": "Train",
        "kind": 6,
        "importPath": "main.model.train",
        "description": "main.model.train",
        "peekOfCode": "class Train:\n    def __init__(self, idsolution, origin, destination, direction, departuretime, arrivaltime, minprice, optionaltext,\n                 duration, changesno, bookable, saleable, trainlist, onlycustom, extraInfo, showSeat, specialOffer,\n                 transportMeasureList, originalPrice):\n        self.idsolution = idsolution\n        self.origin = origin\n        self.destination = destination\n        self.direction = direction    # andata : A, ritorno: R\n        self.departuretime = departuretime\n        self.arrivaltime = arrivaltime",
        "detail": "main.model.train",
        "documentation": {}
    },
    {
        "label": "user_dateinput",
        "kind": 5,
        "importPath": "main.script.script",
        "description": "main.script.script",
        "peekOfCode": "user_dateinput = \"02/12/2021\"\ndates = utils.date_range(user_dateinput)\ntrain_list = []\nfor date in dates:\n    train_api_url2 = f\"https://www.lefrecce.it/msite/api/solutions?origin=GIULIANOVA&destination=MILANO%20CENTRALE&\" \\\n                     f\"arflag=A&adate={date}&atime=17&adultno=1&childno=0&direction=A&frecce=false\"\n    request_trains = requests.get(train_api_url2).json()  # type -> list\n    for train_dict in request_trains:\n        train_obj = Train(**train_dict)\n        train_list.append(train_obj)",
        "detail": "main.script.script",
        "documentation": {}
    },
    {
        "label": "dates",
        "kind": 5,
        "importPath": "main.script.script",
        "description": "main.script.script",
        "peekOfCode": "dates = utils.date_range(user_dateinput)\ntrain_list = []\nfor date in dates:\n    train_api_url2 = f\"https://www.lefrecce.it/msite/api/solutions?origin=GIULIANOVA&destination=MILANO%20CENTRALE&\" \\\n                     f\"arflag=A&adate={date}&atime=17&adultno=1&childno=0&direction=A&frecce=false\"\n    request_trains = requests.get(train_api_url2).json()  # type -> list\n    for train_dict in request_trains:\n        train_obj = Train(**train_dict)\n        train_list.append(train_obj)\ntrain_list.sort()",
        "detail": "main.script.script",
        "documentation": {}
    },
    {
        "label": "train_list",
        "kind": 5,
        "importPath": "main.script.script",
        "description": "main.script.script",
        "peekOfCode": "train_list = []\nfor date in dates:\n    train_api_url2 = f\"https://www.lefrecce.it/msite/api/solutions?origin=GIULIANOVA&destination=MILANO%20CENTRALE&\" \\\n                     f\"arflag=A&adate={date}&atime=17&adultno=1&childno=0&direction=A&frecce=false\"\n    request_trains = requests.get(train_api_url2).json()  # type -> list\n    for train_dict in request_trains:\n        train_obj = Train(**train_dict)\n        train_list.append(train_obj)\ntrain_list.sort()\navailable_trains = [x for x in train_list if x.saleable is True]",
        "detail": "main.script.script",
        "documentation": {}
    },
    {
        "label": "available_trains",
        "kind": 5,
        "importPath": "main.script.script",
        "description": "main.script.script",
        "peekOfCode": "available_trains = [x for x in train_list if x.saleable is True]\nprint(available_trains)\n#  sortare per prezzo, n cambi, durata, e qualit√†, implementando metodi predefiniti\n#  fare il calendario",
        "detail": "main.script.script",
        "documentation": {}
    },
    {
        "label": "remove_null_values",
        "kind": 2,
        "importPath": "main.utils.utils",
        "description": "main.utils.utils",
        "peekOfCode": "def remove_null_values(lst: list):\n    i = 0\n    while 0 in lst:\n        lst.remove(0)\n    i += 1\n    return lst\ndef date_range(date_input):\n    date = datetime.strptime(date_input, \"%d/%m/%Y\").date()\n    newdate = []\n    for i in range(-1, 15):",
        "detail": "main.utils.utils",
        "documentation": {}
    },
    {
        "label": "date_range",
        "kind": 2,
        "importPath": "main.utils.utils",
        "description": "main.utils.utils",
        "peekOfCode": "def date_range(date_input):\n    date = datetime.strptime(date_input, \"%d/%m/%Y\").date()\n    newdate = []\n    for i in range(-1, 15):\n        newdate.append(str((date + timedelta(days=i)).strftime(\"%d/%m/%Y\")))\n    return newdate\ndef get_time(iso_date: int):\n    time_ = datetime.utcfromtimestamp(iso_date / 1000).strftime('%H:%M')\n    return time_\ndef get_date(iso_date: int):",
        "detail": "main.utils.utils",
        "documentation": {}
    },
    {
        "label": "get_time",
        "kind": 2,
        "importPath": "main.utils.utils",
        "description": "main.utils.utils",
        "peekOfCode": "def get_time(iso_date: int):\n    time_ = datetime.utcfromtimestamp(iso_date / 1000).strftime('%H:%M')\n    return time_\ndef get_date(iso_date: int):\n    date_ = datetime.utcfromtimestamp(iso_date / 1000).strftime('%d-%m-%Y')\n    return date_\ndef train_name(trainlist: list):\n    names = []\n    for treni_ in trainlist:\n        names.append(treni_[\"trainidentifier\"])",
        "detail": "main.utils.utils",
        "documentation": {}
    },
    {
        "label": "get_date",
        "kind": 2,
        "importPath": "main.utils.utils",
        "description": "main.utils.utils",
        "peekOfCode": "def get_date(iso_date: int):\n    date_ = datetime.utcfromtimestamp(iso_date / 1000).strftime('%d-%m-%Y')\n    return date_\ndef train_name(trainlist: list):\n    names = []\n    for treni_ in trainlist:\n        names.append(treni_[\"trainidentifier\"])\n    return names",
        "detail": "main.utils.utils",
        "documentation": {}
    },
    {
        "label": "train_name",
        "kind": 2,
        "importPath": "main.utils.utils",
        "description": "main.utils.utils",
        "peekOfCode": "def train_name(trainlist: list):\n    names = []\n    for treni_ in trainlist:\n        names.append(treni_[\"trainidentifier\"])\n    return names",
        "detail": "main.utils.utils",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 2,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "def x(request: Request):\n    return templates.TemplateResponse('index.html', context={'request': request})",
        "detail": "src.api.api",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "app = FastAPI()\ntemplates = Jinja2Templates(directory=\"src/templates/\")\napp.mount(\n    \"/templates\",\n    StaticFiles(directory=\"src/templates\"),\n    name=\"templates\",\n)\n@app.get(\"/\", response_class=HTMLResponse)\ndef x(request: Request):\n    return templates.TemplateResponse('index.html', context={'request': request})",
        "detail": "src.api.api",
        "documentation": {}
    },
    {
        "label": "templates",
        "kind": 5,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "templates = Jinja2Templates(directory=\"src/templates/\")\napp.mount(\n    \"/templates\",\n    StaticFiles(directory=\"src/templates\"),\n    name=\"templates\",\n)\n@app.get(\"/\", response_class=HTMLResponse)\ndef x(request: Request):\n    return templates.TemplateResponse('index.html', context={'request': request})",
        "detail": "src.api.api",
        "documentation": {}
    }
]