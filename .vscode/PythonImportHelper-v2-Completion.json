[
    {
        "label": "utils",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "service.trains_of_day_x",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "service.trains_of_day_x",
        "description": "service.trains_of_day_x",
        "detail": "service.trains_of_day_x",
        "documentation": {}
    },
    {
        "label": "Day",
        "importPath": "model.day",
        "description": "model.day",
        "isExtraImport": true,
        "detail": "model.day",
        "documentation": {}
    },
    {
        "label": "Train",
        "importPath": "model.train",
        "description": "model.train",
        "isExtraImport": true,
        "detail": "model.train",
        "documentation": {}
    },
    {
        "label": "availabl_trains",
        "importPath": "service.train_service",
        "description": "service.train_service",
        "isExtraImport": true,
        "detail": "service.train_service",
        "documentation": {}
    },
    {
        "label": "availabl_trains",
        "importPath": "service.train_service",
        "description": "service.train_service",
        "isExtraImport": true,
        "detail": "service.train_service",
        "documentation": {}
    },
    {
        "label": "grequests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "grequests",
        "description": "grequests",
        "detail": "grequests",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "jsonable_encoder",
        "importPath": "fastapi.encoders",
        "description": "fastapi.encoders",
        "isExtraImport": true,
        "detail": "fastapi.encoders",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "Jinja2Templates",
        "importPath": "fastapi.templating",
        "description": "fastapi.templating",
        "isExtraImport": true,
        "detail": "fastapi.templating",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "starlette.staticfiles",
        "description": "starlette.staticfiles",
        "isExtraImport": true,
        "detail": "starlette.staticfiles",
        "documentation": {}
    },
    {
        "label": "calendar_bestprices",
        "importPath": "script.script",
        "description": "script.script",
        "isExtraImport": true,
        "detail": "script.script",
        "documentation": {}
    },
    {
        "label": "trains_of_day_x",
        "importPath": "service",
        "description": "service",
        "isExtraImport": true,
        "detail": "service",
        "documentation": {}
    },
    {
        "label": "get_date",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 6,
        "importPath": "model.day",
        "description": "model.day",
        "peekOfCode": "class Day:\n    def __init__(self, date, price, trains, duration):\n        self.date = date\n        self.price = price\n        self.trains = trains\n        self.duration = duration\n    def __repr__(self):\n        return f\"{self.date}  {int(self.price)}  treni: {utils.train_name(self.trains)} {self.duration}h\"",
        "detail": "model.day",
        "documentation": {}
    },
    {
        "label": "Train",
        "kind": 6,
        "importPath": "model.train",
        "description": "model.train",
        "peekOfCode": "class Train:\n    def __init__(self, idsolution, origin, destination, direction, departuretime, arrivaltime, minprice, optionaltext,\n                 duration, changesno, bookable, saleable, trainlist, onlycustom, extraInfo, showSeat, specialOffer,\n                 transportMeasureList, originalPrice):\n        self.idsolution = idsolution\n        self.origin = origin\n        self.destination = destination\n        self.direction = direction\n        self.departuretime = departuretime\n        self.arrivaltime = arrivaltime",
        "detail": "model.train",
        "documentation": {}
    },
    {
        "label": "get_time",
        "kind": 2,
        "importPath": "script.prova",
        "description": "script.prova",
        "peekOfCode": "def get_time(iso_date: int):\n    time_ = datetime.utcfromtimestamp(iso_date / 1000).strftime('%H:%M')\n    return time_\niso = 1640701200000\nprint(get_time(iso))",
        "detail": "script.prova",
        "documentation": {}
    },
    {
        "label": "iso",
        "kind": 5,
        "importPath": "script.prova",
        "description": "script.prova",
        "peekOfCode": "iso = 1640701200000\nprint(get_time(iso))",
        "detail": "script.prova",
        "documentation": {}
    },
    {
        "label": "calendar_bestprices",
        "kind": 2,
        "importPath": "script.script",
        "description": "script.script",
        "peekOfCode": "def calendar_bestprices(response_list) -> dict:\n    day1_list = []\n    for train in response_list[0]:\n        if train[\"saleable\"]:\n            trains = Train(**train)\n            train_day1 = Day(utils.get_date(trains.departuretime), trains.originalPrice, trains.trainlist,\n                             trains.duration)\n            day1_list.append(train_day1)\n            day1_list.sort(key=lambda x: x.price)\n        elif IndexError:",
        "detail": "script.script",
        "documentation": {}
    },
    {
        "label": "origin",
        "kind": 5,
        "importPath": "script.script",
        "description": "script.script",
        "peekOfCode": "origin = \"Giulianova\"\ndestination = \"Bologna Centrale\"\ndate = f\"01/12/2021\"\nn_adult = 2\nn_baby = 1\n# calend_prices = calendar_bestprices(availabl_trains(origin, destination, data, n_adult, n_baby))\n# print(calend_prices)\nday = service.trains_of_day_x.Tr_Dayx(origin, destination, \"9\", \"12\", \"2021\", n_adult, n_baby).get_data()\nprint(day)",
        "detail": "script.script",
        "documentation": {}
    },
    {
        "label": "destination",
        "kind": 5,
        "importPath": "script.script",
        "description": "script.script",
        "peekOfCode": "destination = \"Bologna Centrale\"\ndate = f\"01/12/2021\"\nn_adult = 2\nn_baby = 1\n# calend_prices = calendar_bestprices(availabl_trains(origin, destination, data, n_adult, n_baby))\n# print(calend_prices)\nday = service.trains_of_day_x.Tr_Dayx(origin, destination, \"9\", \"12\", \"2021\", n_adult, n_baby).get_data()\nprint(day)",
        "detail": "script.script",
        "documentation": {}
    },
    {
        "label": "date",
        "kind": 5,
        "importPath": "script.script",
        "description": "script.script",
        "peekOfCode": "date = f\"01/12/2021\"\nn_adult = 2\nn_baby = 1\n# calend_prices = calendar_bestprices(availabl_trains(origin, destination, data, n_adult, n_baby))\n# print(calend_prices)\nday = service.trains_of_day_x.Tr_Dayx(origin, destination, \"9\", \"12\", \"2021\", n_adult, n_baby).get_data()\nprint(day)",
        "detail": "script.script",
        "documentation": {}
    },
    {
        "label": "n_adult",
        "kind": 5,
        "importPath": "script.script",
        "description": "script.script",
        "peekOfCode": "n_adult = 2\nn_baby = 1\n# calend_prices = calendar_bestprices(availabl_trains(origin, destination, data, n_adult, n_baby))\n# print(calend_prices)\nday = service.trains_of_day_x.Tr_Dayx(origin, destination, \"9\", \"12\", \"2021\", n_adult, n_baby).get_data()\nprint(day)",
        "detail": "script.script",
        "documentation": {}
    },
    {
        "label": "n_baby",
        "kind": 5,
        "importPath": "script.script",
        "description": "script.script",
        "peekOfCode": "n_baby = 1\n# calend_prices = calendar_bestprices(availabl_trains(origin, destination, data, n_adult, n_baby))\n# print(calend_prices)\nday = service.trains_of_day_x.Tr_Dayx(origin, destination, \"9\", \"12\", \"2021\", n_adult, n_baby).get_data()\nprint(day)",
        "detail": "script.script",
        "documentation": {}
    },
    {
        "label": "day",
        "kind": 5,
        "importPath": "script.script",
        "description": "script.script",
        "peekOfCode": "day = service.trains_of_day_x.Tr_Dayx(origin, destination, \"9\", \"12\", \"2021\", n_adult, n_baby).get_data()\nprint(day)",
        "detail": "script.script",
        "documentation": {}
    },
    {
        "label": "Tr_Dayx",
        "kind": 6,
        "importPath": "service.trains_of_day_x",
        "description": "service.trains_of_day_x",
        "peekOfCode": "class Tr_Dayx:\n    def __init__(self, origin, destination, day, month, year, n_adult, n_baby):\n        self.origin = origin\n        self.destination = destination\n        self.day = day\n        self.month = month\n        self.year = year\n        self.n_adult = n_adult\n        self.n_baby = n_baby\n        self.date = f\"{day}/{month}/{year}\"",
        "detail": "service.trains_of_day_x",
        "documentation": {}
    },
    {
        "label": "availabl_trains",
        "kind": 2,
        "importPath": "service.train_service",
        "description": "service.train_service",
        "peekOfCode": "def availabl_trains(origin, destination, data, n_adult, n_baby, atime):\n    dates = utils.date_range(data)\n    list_of_urls = []\n    for date in dates:\n        urls = f\"https://www.lefrecce.it/msite/api/solutions?origin={origin}&destination={destination}&arflag=A&\" \\\n               f\"adate={date}&atime={atime}&adultno={n_adult}&childno={n_baby}&direction=A&frecce=false\"\n        list_of_urls.append(urls)\n    set_of_requests = (grequests.get(url) for url in list_of_urls)\n    responses = (grequests.map(set_of_requests))  # send all requests at the same time\n    json_response = [response.json() for response in responses if response.status_code == 200]",
        "detail": "service.train_service",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "def home(request: Request):\n    return templates.TemplateResponse('index.html', context={'request': request})\n@app.post(\"/\")\ndef prices(origin: str, destination: str, month: int, year: int, n_adult: int, n_baby: int, atime):\n    date = f\"01/{month}/{year}\"\n    calend_prices = calendar_bestprices(availabl_trains(origin.strip(), destination.strip(), date, n_adult, n_baby, atime))\n    json = jsonable_encoder(calend_prices)\n    return JSONResponse(content=json)\n@app.post(\"/trains\")\ndef trains(origin, destination, day, month, year, n_adult, n_baby):",
        "detail": "src.api.api",
        "documentation": {}
    },
    {
        "label": "prices",
        "kind": 2,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "def prices(origin: str, destination: str, month: int, year: int, n_adult: int, n_baby: int, atime):\n    date = f\"01/{month}/{year}\"\n    calend_prices = calendar_bestprices(availabl_trains(origin.strip(), destination.strip(), date, n_adult, n_baby, atime))\n    json = jsonable_encoder(calend_prices)\n    return JSONResponse(content=json)\n@app.post(\"/trains\")\ndef trains(origin, destination, day, month, year, n_adult, n_baby):\n    trains_per_day = trains_of_day_x.Tr_Dayx(origin, destination, day, month, year, n_adult, n_baby).get_data()\n    return trains_per_day",
        "detail": "src.api.api",
        "documentation": {}
    },
    {
        "label": "trains",
        "kind": 2,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "def trains(origin, destination, day, month, year, n_adult, n_baby):\n    trains_per_day = trains_of_day_x.Tr_Dayx(origin, destination, day, month, year, n_adult, n_baby).get_data()\n    return trains_per_day",
        "detail": "src.api.api",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "app = FastAPI()\ntemplates = Jinja2Templates(directory=\"src/html/\")\napp.mount(\"/html\", StaticFiles(directory=\"src/html\"), name=\"html\")\napp.mount(\"/img\", StaticFiles(directory=\"src/img\"), name=\"img\")\napp.mount(\"/js\", StaticFiles(directory=\"src/js\"), name=\"js\")\napp.mount(\"/css\", StaticFiles(directory=\"src/css\"), name=\"css\")\n@app.get(\"/\", response_class=HTMLResponse)\ndef home(request: Request):\n    return templates.TemplateResponse('index.html', context={'request': request})\n@app.post(\"/\")",
        "detail": "src.api.api",
        "documentation": {}
    },
    {
        "label": "templates",
        "kind": 5,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "templates = Jinja2Templates(directory=\"src/html/\")\napp.mount(\"/html\", StaticFiles(directory=\"src/html\"), name=\"html\")\napp.mount(\"/img\", StaticFiles(directory=\"src/img\"), name=\"img\")\napp.mount(\"/js\", StaticFiles(directory=\"src/js\"), name=\"js\")\napp.mount(\"/css\", StaticFiles(directory=\"src/css\"), name=\"css\")\n@app.get(\"/\", response_class=HTMLResponse)\ndef home(request: Request):\n    return templates.TemplateResponse('index.html', context={'request': request})\n@app.post(\"/\")\ndef prices(origin: str, destination: str, month: int, year: int, n_adult: int, n_baby: int, atime):",
        "detail": "src.api.api",
        "documentation": {}
    },
    {
        "label": "date_range",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def date_range(date_input):\n    date = datetime.strptime(date_input, \"%d/%m/%Y\").date()\n    newdate = []\n    for i in range(0, 31):\n        newdate.append(str((date + timedelta(days=i)).strftime(\"%d/%m/%Y\")))\n    return newdate\ndef get_time(iso_date: int):\n    time_ = datetime.utcfromtimestamp(iso_date / 1000).strftime('%H:%M')\n    return time_\ndef get_date(iso_date: int):",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_time",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def get_time(iso_date: int):\n    time_ = datetime.utcfromtimestamp(iso_date / 1000).strftime('%H:%M')\n    return time_\ndef get_date(iso_date: int):\n    date_ = datetime.utcfromtimestamp(iso_date / 1000).strftime('%d-%m-%Y')\n    return date_\ndef train_name(trainlist: list):\n    names = [treni_[\"trainidentifier\"] for treni_ in trainlist]\n    train_names = \"\"\n    if len(names) >= 3:",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "get_date",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def get_date(iso_date: int):\n    date_ = datetime.utcfromtimestamp(iso_date / 1000).strftime('%d-%m-%Y')\n    return date_\ndef train_name(trainlist: list):\n    names = [treni_[\"trainidentifier\"] for treni_ in trainlist]\n    train_names = \"\"\n    if len(names) >= 3:\n        train_names += f\"{names[0]}; {names[1]}; {names[2]}\"\n    if len(names) == 2:\n        train_names += f\"{names[0]}; {names[1]}\"",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "train_name",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def train_name(trainlist: list):\n    names = [treni_[\"trainidentifier\"] for treni_ in trainlist]\n    train_names = \"\"\n    if len(names) >= 3:\n        train_names += f\"{names[0]}; {names[1]}; {names[2]}\"\n    if len(names) == 2:\n        train_names += f\"{names[0]}; {names[1]}\"\n    if len(names) == 1:\n        train_names += f\"{names[0]}\"\n    return train_names",
        "detail": "utils.utils",
        "documentation": {}
    }
]